{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "ProxyOwnershipTransferred",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "getImplementAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proxyOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceProxyOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "cellulaGame",
						"type": "address"
					}
				],
				"name": "setImplementAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferProxyOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "upgrade limit：he new version of the contract can only add data on the basis of the previous version of the contract,                    and the order of declaration must be behind the original data.。",
			"kind": "dev",
			"methods": {
				"getImplementAddress()": {
					"details": "return the address of the implement contract"
				},
				"proxyOwner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceProxyOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setImplementAddress(address)": {
					"details": "Set the address of the implement contract , only called by the owner"
				},
				"transferProxyOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"stateVariables": {
				"_IMPLEMENT_ADDRESS_POSITION": {
					"details": "The address location of the CellulaGame contract is adopted in this way so as not to be overwritten by the data in the proxy contract itself"
				},
				"_OWNER_POSITION": {
					"details": "Where the Owner is actually stored"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "proxy contract of CellulaGame",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/proxy/CellulaGameProxy.sol": "CellulaGameProxy"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/proxy/Proxy.sol": {
			"keccak256": "0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27",
			"license": "MIT",
			"urls": [
				"bzz-raw://8831721b6f4cc26534d190f9f1631c3f59c9ff38efdd911f85e0882b8e360472",
				"dweb:/ipfs/QmQZnLErZNStirSQ13ZNWQgvEYUtGE5tXYwn4QUPaVUfPN"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
				"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"contracts/proxy/CellulaGameProxy.sol": {
			"keccak256": "0xe9f7bf9563fa236438bba3d825913af57d39f3bbe350704df027d28b29db7ca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://53bcc2b029cb36002897dfeb391c2e01e8ad6970bd9e6b81bb6919da4efaa097",
				"dweb:/ipfs/QmXcjGSvhgzE65FVtz17xzZsH2C4kzNE3bVqAPnnkpnwJX"
			]
		},
		"contracts/proxy/ProxyOwnable.sol": {
			"keccak256": "0x4b62f4ee61ac03aa48f5185382a91ff4e6ccb0a10791e935047f7f65dc4db5d6",
			"urls": [
				"bzz-raw://20e2e361f75a5305a65221a280674ad38ea20ba9cdccc3da4a7186fa2367932a",
				"dweb:/ipfs/QmPLcmE3aH62hr7rWo4zMmZcnZ2NW83skPhGgfZTNprma2"
			]
		}
	},
	"version": 1
}